#!/usr/bin/env ruby
# frozen_string_literal: true

require 'gli'
require 'fue'

class App
  extend GLI::App

  program_desc "Find a GitHub user's e-mail address."
  version Fue::VERSION

  switch %i[v verbose], desc: 'Produce verbose output.', default_value: false
  flag %i[t token], desc: 'GitHub access token.', default_value: ENV.fetch('GITHUB_ACCESS_TOKEN', nil)
  flag %i[u username], desc: 'GitHub username.', default_value: Fue::Auth.instance.username

  arguments :strict
  subcommand_option_handling :normal

  pre do |global_options, _command, options, _args|
    options = global_options.dup
    token = options.delete(:token) || Fue::Auth.instance.token
    $fue = Fue::Finder.new(token, options)
  end

  default_command :help

  desc "Find a GitHub user's e-mail address."
  arg 'username'
  command :find do |c|
    c.flag %i[d depth], desc: 'Maximum search depth in each repository.', default_value: 1
    c.flag %i[b breadth], desc: 'Maximum number of repositories to search.', default_value: 10
    c.action do |global_options, options, args|
      username = args.first
      options[:depth] = options[:depth].to_i
      options[:breadth] = options[:breadth].to_i
      if global_options[:verbose]
        puts "Searching for e-mail address for '#{username}' " \
             "in the first #{options[:depth].to_i > 1 ? "#{options[:depth]} commits" : 'commit'} " \
             "of #{options[:breadth]} most recent repositor#{options[:breadth] == 1 ? 'y' : 'ies'} ..."
      end
      puts $fue.emails(options.merge(username: username, verbose: global_options[:verbose]))
      exit_now! nil, 0
    end
  end

  desc "Find a GitHub repo contributors' e-mail addresses."
  arg 'repo'
  command :contributors do |c|
    c.flag %i[d depth], desc: 'Maximum search depth in each repository for a given user.', default_value: 1
    c.flag %i[b breadth], desc: 'Maximum number of repositories to search.', default_value: 10
    c.action do |global_options, options, args|
      repo = args.first
      options[:depth] = options[:depth].to_i
      options[:breadth] = options[:breadth].to_i
      if global_options[:verbose]
        puts "Searching for contributors' e-mail addresses in '#{repo}' " \
             "in the first #{options[:depth].to_i > 1 ? "#{options[:depth]} commits" : 'commit'} " \
             "of #{options[:breadth]} most recent repositor#{options[:breadth] == 1 ? 'y' : 'ies'} ..."
      end
      contributor_emails = $fue.contributors(options.merge(repo: repo, verbose: global_options[:verbose]))
      contributor_emails.each_pair do |username, emails|
        puts "#{username}: #{emails.join(', ')}"
      end
      exit_now! nil, 0
    end
  end
end

exit App.run(ARGV)
